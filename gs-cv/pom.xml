<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>genericsystem2015</artifactId>
		<groupId>org.genericsystem</groupId>
		<version>4.0-SNAPSHOT</version>
	</parent>

	<artifactId>gs-cv</artifactId>
	<packaging>jar</packaging>
	<name>Generic System Computer Vision</name>

	<properties>
		<deeplearning4j.version>0.9.1</deeplearning4j.version>
		<maven-install-plugin.version>2.5.2</maven-install-plugin.version>
		<opencv.version>3.3.0</opencv.version>
		<eclipse-opencv-libname>Opencv-3.3.0</eclipse-opencv-libname>
		<opencv-libraries>/usr/local/share/OpenCV/java/</opencv-libraries>
		<opencv-jar>${opencv-libraries}/opencv-330.jar</opencv-jar>
		<opencv-native-library>${opencv-libraries}/libopencv_java330.so</opencv-native-library>
		<javacpp.version>1.4.1</javacpp.version>
		<javacpp.parser.skip>true</javacpp.parser.skip>     <!-- To skip header file parsing phase: -Djavacpp.parser.skip=true -->
		<!-- Set the following to false to activate Java CPP. -->
		<javacpp.compiler.skip>true</javacpp.compiler.skip> <!-- To skip native compilation phase: -Djavacpp.compiler.skip=true -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<build>
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<configuration>
						<!-- In eclipse we use the opencv JNI jar via a user library, which 
							will include the native shared libraries. -->
						<excludes>
							<exclude>org.opencv:opencv-java-api</exclude>
						</excludes>
						<classpathContainers>
							<classpathContainer>
								org.eclipse.jdt.launching.JRE_CONTAINER
							</classpathContainer>
							<classpathContainer>
								org.eclipse.jdt.USER_LIBRARY/${eclipse-opencv-libname}
							</classpathContainer>
						</classpathContainers>
					</configuration>
				</plugin>

				<!-- This plugin was added to copy the java wrapper archive (jar) from 
					compiled OpenCV to the local maven repository -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${maven-install-plugin.version}</version>
					<executions>
						<execution>
							<id>install-opencv-jar</id>
							<phase>validate</phase>
							<goals>
								<goal>install-file</goal>
							</goals>
							<configuration>
								<file>${opencv-jar}</file>
								<groupId>org.opencv</groupId>
								<artifactId>opencv-java-bindings</artifactId>
								<version>${opencv.version}</version>
								<packaging>jar</packaging>
								<generatePom>true</generatePom>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<systemPropertyVariables>
							<propertyName>java.library.path</propertyName>
							<buildDirectory>${opencv-libraries}</buildDirectory>
						</systemPropertyVariables>
						<argLine>-Djava.library.path=${opencv-libraries}</argLine>
					</configuration>
				</plugin>

				<!-- This plugin is used to launch a class programmatically after a maven 
					command -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.6.0</version>
					<executions>
						<execution>
							<goals>
								<goal>java</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<arguments>
							<argument>-Djava.library.path=${opencv-libraries}</argument>
						</arguments>
						<systemProperties>
							<systemProperty>
								<key>java.library.path</key>
								<value>${opencv-libraries}</value>
							</systemProperty>
						</systemProperties>
					</configuration>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-install-plugin</artifactId>
										<versionRange>[2.5.2,)</versionRange>
										<goals>
											<goal>install-file</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.bytedeco</groupId>
										<artifactId>javacpp</artifactId>
										<versionRange>[1.4,)</versionRange>
										<goals>
											<goal>build</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.bytedeco</groupId>
				<artifactId>javacpp</artifactId>
				<version>${javacpp.version}</version>
				<configuration>
					<properties>${javacpp.platform}</properties>
					<propertyKeysAndValues>
						<property>
							<name>platform.root</name>
							<value>${javacpp.platform.root}</value>
						</property>
						<property>
							<name>platform.compiler</name>
							<value>${javacpp.platform.compiler}</value>
						</property>
					</propertyKeysAndValues>
					<classPath>${project.build.outputDirectory}</classPath>
					<includePath>${basedir}/src/include/</includePath>
					<linkPath>${basedir}/cppbuild/${javacpp.platform}/lib/</linkPath>
					<preloadPath>${basedir}/cppbuild/${javacpp.platform}/bin/</preloadPath>
				</configuration>
				<executions>
					<execution>
						<id>javacpp.parser</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<skip>${javacpp.parser.skip}</skip>
							<outputDirectory>${project.build.sourceDirectory}</outputDirectory>
							<classOrPackageName>org.genericsystem.cv.utils.NativeMethods</classOrPackageName>
						</configuration>
					</execution>
					<execution>
						<id>javacpp.compiler</id>
						<phase>process-classes</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<skip>${javacpp.compiler.skip}</skip>
							<classOrPackageName>org.genericsystem.cv.utils.NativeMethods</classOrPackageName>
							<copyLibs>true</copyLibs>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<!-- If an error occur with this dependency, please run 'mvn clean validate' 
				on this project -->
			<groupId>org.opencv</groupId>
			<artifactId>opencv-java-bindings</artifactId>
			<version>${opencv.version}</version>
			<type>jar</type>
		</dependency>

		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>2.0.5</version>
		</dependency>

		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox-tools</artifactId>
			<version>2.0.5</version>
		</dependency>

		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>fontbox</artifactId>
			<version>2.0.5</version>
		</dependency>

		<dependency>
			<groupId>org.genericsystem</groupId>
			<artifactId>gs-reactor</artifactId>
			<version>4.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.genericsystem</groupId>
			<artifactId>gs-reinforcer</artifactId>
			<version>4.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
			<version>${deeplearning4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>nd4j-cuda-8.0</artifactId>
			<version>${deeplearning4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-zoo</artifactId>
			<version>${deeplearning4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.bytedeco</groupId>
			<artifactId>javacpp</artifactId>
			<version>${javacpp.version}</version>
		</dependency>

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.4.2</version>
		</dependency>
	</dependencies>
</project>
